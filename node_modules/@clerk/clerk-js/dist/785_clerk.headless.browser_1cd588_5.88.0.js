"use strict";(globalThis.webpackChunk_clerk_clerk_js=globalThis.webpackChunk_clerk_clerk_js||[]).push([["785"],{656:function(e,t,s){s.d(t,{__internal_resetDebugLogger:()=>d,getDebugLogger:()=>h});class r{filters;logLevel;transport;constructor(e,t,s){this.transport=e,this.logLevel=t??"debug",this.filters=s}debug(e,t,s){this.log("debug",e,t,s)}error(e,t,s){this.log("error",e,t,s)}info(e,t,s){this.log("info",e,t,s)}trace(e,t,s){this.log("trace",e,t,s)}warn(e,t,s){this.log("warn",e,t,s)}log(e,t,s,r){if(!this.shouldLogLevel(e)||!this.shouldLogFilters(e,t,r))return;let i={timestamp:Date.now(),level:e,message:t,context:s,source:r};this.transport.send(i).catch(e=>{console.error("Failed to send log entry:",e)})}shouldLogLevel(e){let t=["error","warn","info","debug","trace"],s=t.indexOf(this.logLevel);return t.indexOf(e)<=s}shouldLogFilters(e,t,s){return!this.filters||0===this.filters.length||this.filters.every(r=>!(r.level&&r.level!==e||r.source&&!this.matchesSource(r.source,s)||r.includePatterns&&r.includePatterns.length>0&&!this.shouldInclude(t,r.includePatterns)||r.excludePatterns&&r.excludePatterns.length>0&&this.shouldExclude(t,r.excludePatterns)))}matchesSource(e,t){return"string"==typeof e?t===e:void 0!==t&&e.test(t)}shouldInclude(e,t){return t.some(t=>this.matchesPattern(e,t))}shouldExclude(e,t){return t.some(t=>this.matchesPattern(e,t))}matchesPattern(e,t){return"string"==typeof t?e.includes(t):t.test(e)}}class i{transports;constructor(e){this.transports=e}async send(e){let t=this.transports.map(t=>t.send(e).catch(e=>{console.error("Failed to send to transport:",e)}));await Promise.allSettled(t)}}let n="\x1b[2m",o="\x1b[0m",l="\x1b[37m",a={debug:"\x1b[32m",error:"\x1b[31m",info:"\x1b[34m",trace:"\x1b[35m",warn:"\x1b[33m"};class c{send(e){let t=new Date(e.timestamp).toISOString(),s=e.level.toUpperCase(),r=e.source?`[${e.source}]`:"",i=e.context?` ${JSON.stringify(e.context)}`:"",c=a[e.level]||l,u=`\x1b[1m\x1b[36m[Clerk Debug]${o}`,g=`${n}${t}${o}`,h=`${c}${s}${o}`,d=r?`\x1b[90m${r}${o}`:"",m=`${l}${e.message}${o}`,b=i?`${n}${i}${o}`:"",f=`${u} ${g} ${h}${d}: ${m}${b}`;switch(e.level){case"error":console.error(f);break;case"warn":console.warn(f);break;case"info":console.info(f);break;case"debug":console.debug(f);break;case"trace":console.trace(f);break;default:console.log(f)}return Promise.resolve()}}class u{collector;constructor(e){this.collector=e}async send(e){this.collector&&await Promise.resolve(this.collector.recordLog({context:e.context,level:e.level,message:e.message,organizationId:e.organizationId,sessionId:e.sessionId,source:e.source,timestamp:e.timestamp,userId:e.userId}))}}class g{static instance;initialized=!1;logger=null;initializationPromise=null;constructor(){}static getInstance(){return g.instance||(g.instance=new g),g.instance}async initialize(e={}){return this.initialized?this.logger:(this.initializationPromise||(this.initializationPromise=this.performInitialization(e)),this.initializationPromise)}async performInitialization(e){try{if(e.logLevel&&"string"!=typeof e.logLevel)throw Error("logLevel must be a string");let{logLevel:t,filters:s,telemetryCollector:n}=e,o=[{transport:new c},{transport:new u(n)}].map(e=>e.transport),l=new i(o),a=new r(l,t??"info",s);return this.logger=a,this.initialized=!0,this.logger}catch(e){return console.error("Failed to initialize debug module:",e),this.initializationPromise=null,null}}getLogger(){return this.logger}isInitialized(){return this.initialized}reset(){this.initialized=!1,this.logger=null,this.initializationPromise=null}}async function h(e={}){return g.getInstance().initialize(e)}function d(){g.getInstance().reset()}}}]);