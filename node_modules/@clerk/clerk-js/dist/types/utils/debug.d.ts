import type { TelemetryCollector } from '@clerk/shared/telemetry';
import type { DebugLogFilter, DebugLogLevel } from '@/core/modules/debug/types';
/**
 * Lightweight logger surface that callers can import as a singleton.
 * Methods are no-ops until initialized via `initDebugLogger`.
 */
export interface DebugLoggerInterface {
    debug(message: string, context?: Record<string, unknown>, source?: string): void;
    error(message: string, context?: Record<string, unknown>, source?: string): void;
    info(message: string, context?: Record<string, unknown>, source?: string): void;
    trace(message: string, context?: Record<string, unknown>, source?: string): void;
    warn(message: string, context?: Record<string, unknown>, source?: string): void;
}
type InitOptions = {
    enabled?: boolean;
    filters?: DebugLogFilter[];
    logLevel?: DebugLogLevel;
    telemetryCollector?: TelemetryCollector;
};
/**
 * @public
 * Initialize or update the global debug logger configuration.
 *
 * Behavior:
 * - Safe to call multiple times; subsequent calls update options and re-initialize if needed
 * - When disabled, the logger becomes a no-op and any existing real logger is cleared
 * - Initialization happens asynchronously; errors are handled internally without throwing
 *
 * Options and defaults:
 * - options.enabled: defaults to true
 * - options.logLevel: defaults to 'trace'
 * - options.filters: optional include/exclude filters and matching rules
 * - options.telemetryCollector: optional telemetry sink to forward logs
 *
 * @param options - Configuration options
 * @param options.enabled - Enables the logger; when false, logger is a no-op (default: true)
 * @param options.filters - Filters applied to log entries (level, source, include/exclude patterns)
 * @param options.logLevel - Minimal level to log; lower-priority logs are ignored (default: 'trace')
 * @param options.telemetryCollector - Collector used by the debug transport for emitting telemetry
 *
 * @example
 * ```ts
 * import { initDebugLogger, debugLogger } from '@/utils/debug';
 *
 * initDebugLogger({ enabled: true, logLevel: 'info' });
 * debugLogger.info('Widget rendered', { widgetId: 'w1' }, 'ui');
 * ```
 */
export declare function initDebugLogger(options?: InitOptions): void;
export declare const debugLogger: Readonly<DebugLoggerInterface>;
export {};
