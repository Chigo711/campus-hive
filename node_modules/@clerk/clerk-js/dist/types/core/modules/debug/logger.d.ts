import type { DebugLogFilter, DebugLogLevel, DebugTransport } from './types';
/**
 * Minimal debug logger interface for engineers.
 *
 * @public
 */
export declare class DebugLogger {
    private readonly filters?;
    private readonly logLevel;
    private readonly transport;
    /**
     * Creates a new debug logger.
     *
     * @param transport - Transport used to send log entries
     * @param logLevel - Minimum log level to record. Defaults to `'debug'`
     * @param filters - Optional list of filters to include or exclude messages
     */
    constructor(transport: DebugTransport, logLevel?: DebugLogLevel, filters?: DebugLogFilter[]);
    /**
     * Log a debug message.
     *
     * @param message - Text description of the event
     * @param context - Optional structured context to attach
     * @param source - Optional logical source identifier
     */
    debug(message: string, context?: Record<string, unknown>, source?: string): void;
    /**
     * Log an error message.
     *
     * @param message - Text description of the event
     * @param context - Optional structured context to attach
     * @param source - Optional logical source identifier
     */
    error(message: string, context?: Record<string, unknown>, source?: string): void;
    /**
     * Log an informational message.
     *
     * @param message - Text description of the event
     * @param context - Optional structured context to attach
     * @param source - Optional logical source identifier
     */
    info(message: string, context?: Record<string, unknown>, source?: string): void;
    /**
     * Log a trace message.
     *
     * @param message - Text description of the event
     * @param context - Optional structured context to attach
     * @param source - Optional logical source identifier
     */
    trace(message: string, context?: Record<string, unknown>, source?: string): void;
    /**
     * Log a warning message.
     *
     * @param message - Text description of the event
     * @param context - Optional structured context to attach
     * @param source - Optional logical source identifier
     */
    warn(message: string, context?: Record<string, unknown>, source?: string): void;
    private log;
    private shouldLogLevel;
    private shouldLogFilters;
    /**
     * Checks if a source matches the given pattern (string or RegExp)
     */
    private matchesSource;
    /**
     * Checks if a message should be included based on the given patterns
     */
    private shouldInclude;
    /**
     * Checks if a message should be excluded based on the given patterns
     */
    private shouldExclude;
    /**
     * Checks if a message matches a given pattern (string or RegExp)
     */
    private matchesPattern;
}
